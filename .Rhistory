Rcpp::compileAttributes()
devtools::build()
devtools::install()
library(NonParamQTE)
a = DPMdensity(matrix(1:100, ncol = 2),nskip = 1, ndpost = 1, nclusters = 50)
a = DPMdensity(matrix(1:100, ncol = 2),nskip = 1, ndpost = 1, nclusters = 40)
a = DPMdensity(matrix(1:100, ncol = 2),nskip = 1, ndpost = 1, nclusters = 20)
a = DPMdensity(matrix(1:100, ncol = 2),nskip = 1, ndpost = 1, nclusters =10)
devtools::build()
devtools::install()
library(NonParamQTE)
a = DPMdensity(matrix(1:100, ncol = 2),nskip = 1, ndpost = 1, nclusters =50)
a = DPMdensity(matrix(1:100, ncol = 2),nskip = 1, ndpost = 1, nclusters =20)
a = DPMdensity(matrix(1:100, ncol = 2),nskip = 1, ndpost = 1, nclusters =10)
a = DPMdensity(matrix(1:10, ncol = 2),nskip = 1, ndpost = 1, nclusters =5)
a = DPMdensity(matrix(1:10, ncol = 2),nskip = 1, ndpost = 1, nclusters =4)
a = DPMdensity(matrix(1:10, ncol = 2),nskip = 1, ndpost = 1, nclusters =6)
a = DPMdensity(matrix(1:10, ncol = 2),nskip = 1, ndpost = 1, nclusters =6)
a = DPMdensity(matrix(1:10, ncol = 2),nskip = 1, ndpost = 1, nclusters =2)
a = DPMdensity(matrix(1:10, ncol = 2),nskip = 1, ndpost = 1, nclusters =6)
a = DPMdensity(matrix(1:10, ncol = 2),nskip = 1, ndpost = 1, nclusters =1)
a = DPMdensity(matrix(1:10, ncol = 2),nskip = 1, ndpost = 1, nclusters =2)
a = DPMdensity(matrix(1:10, ncol = 2),nskip = 1, ndpost = 1, nclusters =3)
a = DPMdensity(matrix(1:10, ncol = 2),nskip = 1, ndpost = 1, nclusters =4)
a = DPMdensity(matrix(1:10, ncol = 2),nskip = 1, ndpost = 1, nclusters =5)
a = DPMdensity(matrix(1:10, ncol = 2),nskip = 1, ndpost = 1, nclusters =6)
?rmultinom
rmultinom(2, 3, prob = c(0.5,0.3,0.2))
ssourceCpp("src/rcpparma_hello_world.cpp")
sourceCpp("src/rcpparma_hello_world.cpp")
Rcpp::sourceCpp("src/rcpparma_hello_world.cpp")
rMultinomial(2,2,c(0.9,0.1),x)
x = c()
rMultinomial(2,2,c(0.9,0.1),x)
x = c(0,0)
rMultinomial(2,2,c(0.9,0.1),x)
x
a = DPMdensity(matrix(1:10, ncol = 2),nskip = 1, ndpost = 1, nclusters =5)
?sample
sample(c(1,2,3,4),4)
sample(c(1,2,3,4),5)
sample(c(1,2,3,4),5,TRUE)
sourceCpp("src/rcpparma_hello_world.cpp")
Rcpp::sourceCpp("src/rcpparma_hello_world.cpp")
IntegerVector(-1,4)
test(-1,4)
Rcpp::sourceCpp("src/rcpparma_hello_world.cpp")
test(-1,4)
test(0,4)
Rcpp::compileAttributes()
devtools::build()
devtools::install()
library(NonParamQTE)
a = DPMdensity(matrix(1:100, ncol = 2), nskip = 1, ndpost = 1, nclusters = 50)
a = DPMdensity(matrix(1:100, ncol = 2), nskip = 1, ndpost = 1, nclusters = 5)
a = DPMdensity(matrix(1:10, ncol = 2), nskip = 1, ndpost = 1, nclusters = 5)
devtools::build()
devtools::install()
library(NonParamQTE)
a = DPMdensity(matrix(1:10, ncol = 2), nskip = 1, ndpost = 1, nclusters = 5)
a = DPMdensity(matrix(1:10, ncol = 2), nskip = 1, ndpost = 1, nclusters = 2)
a = DPMdensity(matrix(1:10, ncol = 2), nskip = 1, ndpost = 1, nclusters = 6)
devtools::build()
Rcpp::compileAttributes()
devtools::build()
Rcpp::compileAttributes()
devtools::build()
devtools::install()
library(NonParamQTE)
a = DPMdensity(matrix(1:100, ncol = 2), nskip = 1, ndpost = 1, nclusters = 5)
a
Rcpp::compileAttributes()
devtools::build()
devtools::install()
library(NonParamQTE)
a = DPMdensity(matrix(1:100, ncol = 2), nskip = 1, ndpost = 1,nclusters = 5)
log(2*pi)
pi
Rcpp::sourceCpp("src/rcpparma_hello_world.cpp")
Rcpp::sourceCpp("src/rcpparma_hello_world.cpp")
Rcpp::sourceCpp("src/rcpparma_hello_world.cpp")
Rcpp::sourceCpp("src/rcpparma_hello_world.cpp")
library(mvtnorm)
y = rmvnorm(100, mean = c(1,2))
dim(y)
res=dMvnormArma(100, 2, y, c(1,2), diag(x=1,nrow = 2,ncol = 2))
resR=dmvnorm(y,mean = c(1,2),diag(x=1,nrow = 2,ncol = 2))
res==resR
sum(res==resR)
res
is.matrix(res)
is.vector(res)
Rcpp:sourceCpp("src/rcpparma_hello_world.cpp")
Rcpp::sourceCpp("src/rcpparma_hello_world.cpp")
idxmax(c(1,2,3,4))
idxmax(c(1,2,10,4))
Rcpp::compileAttributes()
devtools::build()
Rcpp::sourceCpp("src/rcpparma_hello_world.cpp")
test(c(1,2,3,4))
log(c(1,2,3,4))
Rcpp::compileAttributes()
devtools::build()
Rcpp::compileAttributes()
devtools::build()
Rcpp::compileAttributes()
devtools::build()
Rcpp::compileAttributes()
devtools::build()
devtools::install()
library(NonParamQTE)
a = DPMdensity(matrix(1:100, ncol = 2), nskip = 1, ndpost = 1, nclusters = 5)
nskip=4
ndpost=5
keepevery=2
for(i in 1:(nskip+ndpost)) {
if(i<=nskip){
print("draw")
} else {
for (j in 1:keepevery) {
print("draw")
}
print("return")
}
}
keepevery=1
for(i in 1:(nskip+ndpost)) {
if(i<=nskip){
print("draw")
} else {
for (j in 1:keepevery) {
print("draw")
}
print("return")
}
}
?DPMdensity
Rcpp::compileAttributes()
devtools::build()
Rcpp::compileAttributes()
devtools::build()
devtools::build()
Rcpp::sourceCpp("src/rcpparma_hello_world.cpp")
Rcpp::sourceCpp("src/rcpparma_hello_world.cpp")
Rcpp::sourceCpp("src/rcpparma_hello_world.cpp")
test(matrix(1:4,ncol = 2),matrix(5:8, ncol = 2))
Rcpp::sourceCpp("src/rcpparma_hello_world.cpp")
test(matrix(1:4,ncol = 2),matrix(5:8, ncol = 2))
Rcpp::sourceCpp("src/rcpparma_hello_world.cpp")
test(matrix(1:4,ncol = 2),matrix(5:8, ncol = 2))
matrix(1:4,ncol = 2)
matrix(5:8, ncol = 2)
c(5,6)
a=c(5,6)
b=matrix(1:4,ncol = 2)
t(a)%*%b%*%a
Rcpp::sourceCpp("src/rcpparma_hello_world.cpp")
test(matrix(1:4,ncol = 2),matrix(5:8, ncol = 2))
Rcpp::compileAttributes()
devtools::build()
devtools::build()
Rcpp::sourceCpp("src/rcpparma_hello_world.cpp")
Rcpp::sourceCpp("src/rcpparma_hello_world.cpp")
Rcpp::compileAttributes()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
Rcpp::compileAttributes()
devtools::build()
devtools::install()
library(NonParamQTE)
a = DPMdensity(matrix(1:100, ncol = 2),nskip = 2,ndpost = 2,nclusters = 5)
devtools::build()
devtools::install()
library(NonParamQTE)
a = DPMdensity(matrix(1:100, ncol = 2),nskip = 2,ndpost = 2,nclusters = 5)
a$alpha
a
Rcpp::compileAttributes()
devtools::build()
devtools::install()
library(NonParamQTE)
a = DPMdensity(matrix(1:100, ncol = 2),nskip = 2,ndpost = 2,nclusters = 5)
Rcpp::compileAttributes()
devtools::build()
Rcpp::compileAttributes()
devtools::build()
devtools::install()
library(NonParamQTE)
a = DPMdensity(matrix(1:100, ncol = 2),nskip = 2,ndpost = 2,nclusters = 5)
a$predict.densities.mean
str(a)
dim(a$predict.densities)
dim(a$predict.densities.mean)
length(a$predict.densities.mean)
sqrt
sqrt(1000)
31*31
a = DPMdensity(matrix(1:100, ncol = 2),nskip = 2,ndpost = 2,nclusters = 5)
b = DPMdensity(matrix(1:100, ncol = 2),nskip = 2,ndpost = 2,nclusters = 5,state = a$state, status = FALSE)
str(b)
Rcpp::compileAttributes()
devtools::build()
devtools::install()
library(NonParamQTE)
a = DPMdensity(matrix(1:100, ncol = 2),nskip = 2,ndpost = 2,nclusters = 5)
version
?proc.time
a$proc.time
a$proc.time
a$proc.time[,3]
Rcpp::compileAttributes()
devtools::build()
devtools::install()
library(NonParamQTE)
a = DPMdensity(matrix(1:100, ncol = 2),nskip = 2,ndpost = 2,nclusters = 5)
RcppArmadillo::RcppArmadillo.package.skeleton()
Rcpp::compileAttributes()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
?devtools::build
devtools::build()
devtools::install()
rm(list = ls())
devtools::build()
devtools::install()
dim(volcano)
volcano[1,]
diag(c(1, 2))
zeta1 = c(1, 1)
zeta2 = c(2, 2)
zeta3 = c(3, 3)
omega1 = diag(x=1, nrow = 2, ncol = 2)
omega2 = diag(c(1, 2))
omega3 = diag(c(2, 1))
n = 500
y = matrix(NA, nrow = n, ncol = 2)
library(mvtnorm)
library(NonparamQTE)
library(NonParamQTE)
for (i in 1:n) {
tmp = sample(1:3, 1)
if (tmp==1){
y[i, ] = rmvnorm(1, mean = zeta1, sigma = omega1)
}
if (tmp==2){
y[i, ] = rmvnorm(1, mean = zeta2, sigma = omega2)
}
if (tmp==3){
y[i, ] = rmvnorm(1, mean = zeta3, sigma = omega3)
}
}
library(NonParamQTE)
res = DPMdensity(y, ngrid = 500)
res$predict.densities.mean
?with
library(ggplot2)
str(seals)
Rcpp::compileAttributes()
devtools::build()
devtools::install()
library(NonParamQTE)
res = DPMdensity(y, ngrid = 500)
zeta1 = c(1, 1)
zeta2 = c(2, 2)
zeta3 = c(3, 3)
omega1 = diag(x=1, nrow = 2, ncol = 2)
omega2 = diag(c(1, 2))
omega3 = diag(c(2, 1))
n = 500
y = matrix(NA, nrow = n, ncol = 2)
d = c()
for (i in 1:n) {
tmp = sample(1:3, 1)
if (tmp==1){
y[i, ] = rmvnorm(1, mean = zeta1, sigma = omega1)
}
if (tmp==2){
y[i, ] = rmvnorm(1, mean = zeta2, sigma = omega2)
}
if (tmp==3){
y[i, ] = rmvnorm(1, mean = zeta3, sigma = omega3)
}
d[i] = (1/3)*dmvnorm(y[i, ], zeta1, omega1) + (1/3)*dmvnorm(y[i, ], zeta2, omega2) + (1/3)*dmvnorm(y[i, ], zeta3, omega3)
}
start = Sys.time()
res = DPMdensity(y, ngrid = 500)
Sys.time()-start
df = data.frame("y1" = res$y.pred[,1], "y2" = res$y.pred[,2], "pred" = res$predict.densities.mean, "true" = d)
d = c()
for (i in 1:nrow(res$y.pred)) {
d[i] = (1/3)*dmvnorm(res$y.pred[i, ], zeta1, omega1) + (1/3)*dmvnorm(res$y.pred[i, ], zeta2, omega2) + (1/3)*dmvnorm(res$y.pred[i, ], zeta3, omega3)
}
df = data.frame("y1" = res$y.pred[,1], "y2" = res$y.pred[,2], "pred" = res$predict.densities.mean, "true" = d)
df
head(df)
head(seals)
m = ggplot(df, aes(y1, y2))
m + geom_contour(aes(z=pred))
m + geom_contour(aes(z=pred)) + geom_contour(aes(z=d))
m + geom_contour(aes(z=pred, col="blue")) + geom_contour(aes(z=d, col="red"))
m + geom_contour(aes(z=pred, col="blue"))
m + geom_contour(aes(z=pred))
m + geom_contour(aes(z=pred)) + geom_contour(aes(z=d, col="red"))
dim(res$cluster.weight)
plot(res$cluster.weight[,-1])
plot(res$alpha)
length(alpha)
plot(res$alpha)
plot(1:1000, res$alpha)
plot(1:1000, res$alpha, ylim = c(0,5))
b = exp(res$cluster.weight)
plot(rep(1,1000), b[,1])
plot(rep(2,1000), b[,2], add=TRUE)
plot(rep(2,1000), b[,50], add=TRUE)
plot(rep(2,1000), b[,10])
start = Sys.time()
res = DPMdensity(y, ngrid = 500, a0=10, b0=1, nclusters = 10)
Sys.time()-start
d = c()
for (i in 1:nrow(res$y.pred)) {
d[i] = (1/3)*dmvnorm(res$y.pred[i, ], zeta1, omega1) + (1/3)*dmvnorm(res$y.pred[i, ], zeta2, omega2) + (1/3)*dmvnorm(res$y.pred[i, ], zeta3, omega3)
}
df = data.frame("y1" = res$y.pred[,1], "y2" = res$y.pred[,2], "pred" = res$predict.densities.mean, "true" = d)
m = ggplot(df, aes(y1, y2))
m + geom_contour(aes(z=pred)) + geom_contour(aes(z=d, col="red"))
start = Sys.time()
res = DPMdensity(y, ngrid = 500, a0=10, b0=1, nclusters = 10, nskip = 2000, ndpost = 2000)
Sys.time()-start
d = c()
for (i in 1:nrow(res$y.pred)) {
d[i] = (1/3)*dmvnorm(res$y.pred[i, ], zeta1, omega1) + (1/3)*dmvnorm(res$y.pred[i, ], zeta2, omega2) + (1/3)*dmvnorm(res$y.pred[i, ], zeta3, omega3)
}
df = data.frame("y1" = res$y.pred[,1], "y2" = res$y.pred[,2], "pred" = res$predict.densities.mean, "true" = d)
m = ggplot(df, aes(y1, y2))
m + geom_contour(aes(z=pred)) + geom_contour(aes(z=d, col="red"))
Rcpp::compileAttributes()
rm(list = ls())
devtools::build()
devtools::install()
