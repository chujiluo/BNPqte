// -*- mode: C++; c-indent-level: 4; c-basic-offset: 4; indent-tabs-mode: nil; -*-
#ifndef GUARD_random_h
#define GUARD_random_h

// we only include RcppArmadillo.h which pulls Rcpp.h in for us
#include "RcppArmadillo.h"

// [[Rcpp::depends(RcppArmadillo)]]

// Multivariate distributions

// Generate a sample from generalized Dirichlet distribution
Rcpp::NumericVector rGeneralizedDirichletArma(Rcpp::NumericVector & a, Rcpp::NumericVector & b) {
  int len = a.size();
  Rcpp::NumericVector v(len);
  Rcpp::NumericVector w(len+1);
  
  for(int i=0; i<len; i++){
    double v1 = arma::randg<double>(arma::distr_param(a[i], 1.0));
    double v2 = arma::randg<double>(arma::distr_param(b[i], 1.0));
    v(i) = v1 / (v1 + v2);
    
    if(i==0){
      w[i] = v[i];
    }else{
      w[i] = (1.0 - Rcpp::sum(w)) * v[i];
    }
  }
  w[len] = 1.0 - Rcpp::sum(w);
  
  return w;
}

// Generate a sample from multinomial distribution
Rcpp::IntegerVector rMultinomial(int k, Rcpp::NumericVector & w){
  Rcpp::IntegerVector outcome(k);
  R::rmultinom(1, & w[0], k, & outcome[0]);
  return outcome;
}

// // Generate a sample from Normal-Inverse-Wishart distribution
// Rcpp::List rNormalInverseWishartArma(arma::colvec & m, double lambda, int nu, arma::mat & Psi){
//   Rcpp::List outcome(2);
//   outcome[0] = arma::iwishrnd(Psi, nu);
//   arma::mat tmp = outcome(0) / lambda;
//   outcome[1] = arma::mvnrnd(m, tmp);
//   return outcome;
// }

Rcpp::List rNormalInverseWishartArma(arma::colvec & m, double lambda, int nu, arma::mat & Psi, arma::mat & R){
  Rcpp::List outcome(2);
  arma::mat tmp;
  tmp = arma::iwishrnd(Psi, nu, R);
  outcome[0] = tmp;
  // *tmp = outcome[0];
  outcome[1] = arma::mvnrnd(m, tmp);
  return outcome;
}


#endif