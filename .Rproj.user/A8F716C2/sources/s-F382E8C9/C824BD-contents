// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// cDPMdensity
/* Rcpp::List cDPMdensity(const int& n, const int& d, const arma::mat& y, const bool evaluation, const int ngrid, const arma::colvec& grid1, const arma::colvec& grid2, const bool updateAlhpa, const bool useHyperpriors, const double a0, const double b0, double alpha, const arma::colvec& m0, const arma::mat& S0, arma::colvec& m, const double gamma1, const double gamma2, double lambda, const int nu0, const arma::mat& Psi0, const int nu, arma::mat& iPsi, const int nclusters, const int nskip, const int ndpost, const int keepevery);
RcppExport SEXP _NonParamQTE_cDPMdensity(SEXP nSEXP, SEXP dSEXP, SEXP ySEXP, SEXP evaluationSEXP, SEXP ngridSEXP, SEXP grid1SEXP, SEXP grid2SEXP, SEXP updateAlhpaSEXP, SEXP useHyperpriorsSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP alphaSEXP, SEXP m0SEXP, SEXP S0SEXP, SEXP mSEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP lambdaSEXP, SEXP nu0SEXP, SEXP Psi0SEXP, SEXP nuSEXP, SEXP iPsiSEXP, SEXP nclustersSEXP, SEXP nskipSEXP, SEXP ndpostSEXP, SEXP keepeverySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const bool >::type evaluation(evaluationSEXP);
    Rcpp::traits::input_parameter< const int >::type ngrid(ngridSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type grid1(grid1SEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type grid2(grid2SEXP);
    Rcpp::traits::input_parameter< const bool >::type updateAlhpa(updateAlhpaSEXP);
    Rcpp::traits::input_parameter< const bool >::type useHyperpriors(useHyperpriorsSEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S0(S0SEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const double >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const int >::type nu0(nu0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Psi0(Psi0SEXP);
    Rcpp::traits::input_parameter< const int >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type iPsi(iPsiSEXP);
    Rcpp::traits::input_parameter< const int >::type nclusters(nclustersSEXP);
    Rcpp::traits::input_parameter< const int >::type nskip(nskipSEXP);
    Rcpp::traits::input_parameter< const int >::type ndpost(ndpostSEXP);
    Rcpp::traits::input_parameter< const int >::type keepevery(keepeverySEXP);
    rcpp_result_gen = Rcpp::wrap(cDPMdensity(n, d, y, evaluation, ngrid, grid1, grid2, updateAlhpa, useHyperpriors, a0, b0, alpha, m0, S0, m, gamma1, gamma2, lambda, nu0, Psi0, nu, iPsi, nclusters, nskip, ndpost, keepevery));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _NonParamQTE_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// TestFun
Rcpp::List TestFun(const int& n);
RcppExport SEXP _NonParamQTE_TestFun(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(TestFun(n));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _NonParamQTE_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _NonParamQTE_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _NonParamQTE_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _NonParamQTE_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_NonParamQTE_cDPMdensity", (DL_FUNC) &_NonParamQTE_cDPMdensity, 26},
    {"_NonParamQTE_rcpparma_bothproducts", (DL_FUNC) &_NonParamQTE_rcpparma_bothproducts, 1},
    {"_NonParamQTE_TestFun", (DL_FUNC) &_NonParamQTE_TestFun, 1},
    {"_NonParamQTE_rcpparma_hello_world", (DL_FUNC) &_NonParamQTE_rcpparma_hello_world, 0},
    {"_NonParamQTE_rcpparma_outerproduct", (DL_FUNC) &_NonParamQTE_rcpparma_outerproduct, 1},
    {"_NonParamQTE_rcpparma_innerproduct", (DL_FUNC) &_NonParamQTE_rcpparma_innerproduct, 1},
    {"_NonParamQTE_rcpparma_bothproducts", (DL_FUNC) &_NonParamQTE_rcpparma_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_NonParamQTE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
